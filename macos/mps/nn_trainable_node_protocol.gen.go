// Code generated by DarwinKit. DO NOT EDIT.

package mps

import (
	"github.com/progrium/darwinkit/objc"
)

// A protocol that defines methods that determine whether and when neural network training parameters are updated. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metalperformanceshaders/mpsnntrainablenode?language=objc
type PNNTrainableNode interface {
	// optional
	SetTrainingStyle(value NNTrainingStyle)
	HasSetTrainingStyle() bool

	// optional
	TrainingStyle() NNTrainingStyle
	HasTrainingStyle() bool
}

// ensure impl type implements protocol interface
var _ PNNTrainableNode = (*NNTrainableNodeObject)(nil)

// A concrete type for the [PNNTrainableNode] protocol.
type NNTrainableNodeObject struct {
	objc.Object
}

func (n_ NNTrainableNodeObject) HasSetTrainingStyle() bool {
	return n_.RespondsToSelector(objc.Sel("setTrainingStyle:"))
}

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metalperformanceshaders/mpsnntrainablenode/2952971-trainingstyle?language=objc
func (n_ NNTrainableNodeObject) SetTrainingStyle(value NNTrainingStyle) {
	objc.Call[objc.Void](n_, objc.Sel("setTrainingStyle:"), value)
}

func (n_ NNTrainableNodeObject) HasTrainingStyle() bool {
	return n_.RespondsToSelector(objc.Sel("trainingStyle"))
}

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metalperformanceshaders/mpsnntrainablenode/2952971-trainingstyle?language=objc
func (n_ NNTrainableNodeObject) TrainingStyle() NNTrainingStyle {
	rv := objc.Call[NNTrainingStyle](n_, objc.Sel("trainingStyle"))
	return rv
}
