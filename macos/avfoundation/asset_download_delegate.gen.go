// Code generated by DarwinKit. DO NOT EDIT.

package avfoundation

import (
	"github.com/progrium/macdriver/macos/coremedia"
	"github.com/progrium/macdriver/macos/foundation"
	"github.com/progrium/macdriver/objc"
)

// A protocol that defines the methods to implement to respond to asset-download events. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate?language=objc
type PAssetDownloadDelegate interface {
	// optional
	URLSessionAssetDownloadTaskDidResolveMediaSelection(session foundation.URLSession, assetDownloadTask AssetDownloadTask, resolvedMediaSelection MediaSelection)
	HasURLSessionAssetDownloadTaskDidResolveMediaSelection() bool

	// optional
	URLSessionAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoad(session foundation.URLSession, assetDownloadTask AssetDownloadTask, timeRange coremedia.TimeRange, loadedTimeRanges []foundation.Value, timeRangeExpectedToLoad coremedia.TimeRange)
	HasURLSessionAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoad() bool

	// optional
	URLSessionAggregateAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoadForMediaSelection(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, timeRange coremedia.TimeRange, loadedTimeRanges []foundation.Value, timeRangeExpectedToLoad coremedia.TimeRange, mediaSelection MediaSelection)
	HasURLSessionAggregateAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoadForMediaSelection() bool

	// optional
	URLSessionAggregateAssetDownloadTaskWillDownloadToURL(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, location foundation.URL)
	HasURLSessionAggregateAssetDownloadTaskWillDownloadToURL() bool

	// optional
	URLSessionAssetDownloadTaskWillDownloadVariants(session foundation.URLSession, assetDownloadTask AssetDownloadTask, variants []AssetVariant)
	HasURLSessionAssetDownloadTaskWillDownloadVariants() bool

	// optional
	URLSessionAggregateAssetDownloadTaskDidCompleteForMediaSelection(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, mediaSelection MediaSelection)
	HasURLSessionAggregateAssetDownloadTaskDidCompleteForMediaSelection() bool

	// optional
	URLSessionAssetDownloadTaskDidFinishDownloadingToURL(session foundation.URLSession, assetDownloadTask AssetDownloadTask, location foundation.URL)
	HasURLSessionAssetDownloadTaskDidFinishDownloadingToURL() bool
}

// A delegate implementation builder for the [PAssetDownloadDelegate] protocol.
type AssetDownloadDelegate struct {
	_URLSessionAssetDownloadTaskDidResolveMediaSelection                                                               func(session foundation.URLSession, assetDownloadTask AssetDownloadTask, resolvedMediaSelection MediaSelection)
	_URLSessionAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoad                           func(session foundation.URLSession, assetDownloadTask AssetDownloadTask, timeRange coremedia.TimeRange, loadedTimeRanges []foundation.Value, timeRangeExpectedToLoad coremedia.TimeRange)
	_URLSessionAggregateAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoadForMediaSelection func(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, timeRange coremedia.TimeRange, loadedTimeRanges []foundation.Value, timeRangeExpectedToLoad coremedia.TimeRange, mediaSelection MediaSelection)
	_URLSessionAggregateAssetDownloadTaskWillDownloadToURL                                                             func(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, location foundation.URL)
	_URLSessionAssetDownloadTaskWillDownloadVariants                                                                   func(session foundation.URLSession, assetDownloadTask AssetDownloadTask, variants []AssetVariant)
	_URLSessionAggregateAssetDownloadTaskDidCompleteForMediaSelection                                                  func(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, mediaSelection MediaSelection)
	_URLSessionAssetDownloadTaskDidFinishDownloadingToURL                                                              func(session foundation.URLSession, assetDownloadTask AssetDownloadTask, location foundation.URL)
}

func (di *AssetDownloadDelegate) HasURLSessionAssetDownloadTaskDidResolveMediaSelection() bool {
	return di._URLSessionAssetDownloadTaskDidResolveMediaSelection != nil
}

// Tells the delegate that a download task resolved the media selection to download, including any automatic selections. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/1621023-urlsession?language=objc
func (di *AssetDownloadDelegate) SetURLSessionAssetDownloadTaskDidResolveMediaSelection(f func(session foundation.URLSession, assetDownloadTask AssetDownloadTask, resolvedMediaSelection MediaSelection)) {
	di._URLSessionAssetDownloadTaskDidResolveMediaSelection = f
}

// Tells the delegate that a download task resolved the media selection to download, including any automatic selections. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/1621023-urlsession?language=objc
func (di *AssetDownloadDelegate) URLSessionAssetDownloadTaskDidResolveMediaSelection(session foundation.URLSession, assetDownloadTask AssetDownloadTask, resolvedMediaSelection MediaSelection) {
	di._URLSessionAssetDownloadTaskDidResolveMediaSelection(session, assetDownloadTask, resolvedMediaSelection)
}
func (di *AssetDownloadDelegate) HasURLSessionAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoad() bool {
	return di._URLSessionAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoad != nil
}

// Tells the delegate that a download task loaded a new time range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/1621019-urlsession?language=objc
func (di *AssetDownloadDelegate) SetURLSessionAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoad(f func(session foundation.URLSession, assetDownloadTask AssetDownloadTask, timeRange coremedia.TimeRange, loadedTimeRanges []foundation.Value, timeRangeExpectedToLoad coremedia.TimeRange)) {
	di._URLSessionAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoad = f
}

// Tells the delegate that a download task loaded a new time range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/1621019-urlsession?language=objc
func (di *AssetDownloadDelegate) URLSessionAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoad(session foundation.URLSession, assetDownloadTask AssetDownloadTask, timeRange coremedia.TimeRange, loadedTimeRanges []foundation.Value, timeRangeExpectedToLoad coremedia.TimeRange) {
	di._URLSessionAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoad(session, assetDownloadTask, timeRange, loadedTimeRanges, timeRangeExpectedToLoad)
}
func (di *AssetDownloadDelegate) HasURLSessionAggregateAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoadForMediaSelection() bool {
	return di._URLSessionAggregateAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoadForMediaSelection != nil
}

// Tells the delegate that the aggregate download task loaded a new time range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/2919988-urlsession?language=objc
func (di *AssetDownloadDelegate) SetURLSessionAggregateAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoadForMediaSelection(f func(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, timeRange coremedia.TimeRange, loadedTimeRanges []foundation.Value, timeRangeExpectedToLoad coremedia.TimeRange, mediaSelection MediaSelection)) {
	di._URLSessionAggregateAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoadForMediaSelection = f
}

// Tells the delegate that the aggregate download task loaded a new time range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/2919988-urlsession?language=objc
func (di *AssetDownloadDelegate) URLSessionAggregateAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoadForMediaSelection(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, timeRange coremedia.TimeRange, loadedTimeRanges []foundation.Value, timeRangeExpectedToLoad coremedia.TimeRange, mediaSelection MediaSelection) {
	di._URLSessionAggregateAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoadForMediaSelection(session, aggregateAssetDownloadTask, timeRange, loadedTimeRanges, timeRangeExpectedToLoad, mediaSelection)
}
func (di *AssetDownloadDelegate) HasURLSessionAggregateAssetDownloadTaskWillDownloadToURL() bool {
	return di._URLSessionAggregateAssetDownloadTaskWillDownloadToURL != nil
}

// Tells the delegate the final location of the asset when the download completes. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/2897241-urlsession?language=objc
func (di *AssetDownloadDelegate) SetURLSessionAggregateAssetDownloadTaskWillDownloadToURL(f func(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, location foundation.URL)) {
	di._URLSessionAggregateAssetDownloadTaskWillDownloadToURL = f
}

// Tells the delegate the final location of the asset when the download completes. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/2897241-urlsession?language=objc
func (di *AssetDownloadDelegate) URLSessionAggregateAssetDownloadTaskWillDownloadToURL(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, location foundation.URL) {
	di._URLSessionAggregateAssetDownloadTaskWillDownloadToURL(session, aggregateAssetDownloadTask, location)
}
func (di *AssetDownloadDelegate) HasURLSessionAssetDownloadTaskWillDownloadVariants() bool {
	return di._URLSessionAssetDownloadTaskWillDownloadVariants != nil
}

// Tells the delegate that a download task completed variant selection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/3751760-urlsession?language=objc
func (di *AssetDownloadDelegate) SetURLSessionAssetDownloadTaskWillDownloadVariants(f func(session foundation.URLSession, assetDownloadTask AssetDownloadTask, variants []AssetVariant)) {
	di._URLSessionAssetDownloadTaskWillDownloadVariants = f
}

// Tells the delegate that a download task completed variant selection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/3751760-urlsession?language=objc
func (di *AssetDownloadDelegate) URLSessionAssetDownloadTaskWillDownloadVariants(session foundation.URLSession, assetDownloadTask AssetDownloadTask, variants []AssetVariant) {
	di._URLSessionAssetDownloadTaskWillDownloadVariants(session, assetDownloadTask, variants)
}
func (di *AssetDownloadDelegate) HasURLSessionAggregateAssetDownloadTaskDidCompleteForMediaSelection() bool {
	return di._URLSessionAggregateAssetDownloadTaskDidCompleteForMediaSelection != nil
}

// Tells the delegate that a child task finished downloading a media selection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/2897211-urlsession?language=objc
func (di *AssetDownloadDelegate) SetURLSessionAggregateAssetDownloadTaskDidCompleteForMediaSelection(f func(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, mediaSelection MediaSelection)) {
	di._URLSessionAggregateAssetDownloadTaskDidCompleteForMediaSelection = f
}

// Tells the delegate that a child task finished downloading a media selection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/2897211-urlsession?language=objc
func (di *AssetDownloadDelegate) URLSessionAggregateAssetDownloadTaskDidCompleteForMediaSelection(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, mediaSelection MediaSelection) {
	di._URLSessionAggregateAssetDownloadTaskDidCompleteForMediaSelection(session, aggregateAssetDownloadTask, mediaSelection)
}
func (di *AssetDownloadDelegate) HasURLSessionAssetDownloadTaskDidFinishDownloadingToURL() bool {
	return di._URLSessionAssetDownloadTaskDidFinishDownloadingToURL != nil
}

// Tells the delegate that a download task finished downloading the requested asset. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/1845200-urlsession?language=objc
func (di *AssetDownloadDelegate) SetURLSessionAssetDownloadTaskDidFinishDownloadingToURL(f func(session foundation.URLSession, assetDownloadTask AssetDownloadTask, location foundation.URL)) {
	di._URLSessionAssetDownloadTaskDidFinishDownloadingToURL = f
}

// Tells the delegate that a download task finished downloading the requested asset. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/1845200-urlsession?language=objc
func (di *AssetDownloadDelegate) URLSessionAssetDownloadTaskDidFinishDownloadingToURL(session foundation.URLSession, assetDownloadTask AssetDownloadTask, location foundation.URL) {
	di._URLSessionAssetDownloadTaskDidFinishDownloadingToURL(session, assetDownloadTask, location)
}

// ensure impl type implements protocol interface
var _ PAssetDownloadDelegate = (*AssetDownloadDelegateObject)(nil)

// A concrete type for the [PAssetDownloadDelegate] protocol.
type AssetDownloadDelegateObject struct {
	objc.Object
}

func (a_ AssetDownloadDelegateObject) HasURLSessionAssetDownloadTaskDidResolveMediaSelection() bool {
	return a_.RespondsToSelector(objc.Sel("URLSession:assetDownloadTask:didResolveMediaSelection:"))
}

// Tells the delegate that a download task resolved the media selection to download, including any automatic selections. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/1621023-urlsession?language=objc
func (a_ AssetDownloadDelegateObject) URLSessionAssetDownloadTaskDidResolveMediaSelection(session foundation.URLSession, assetDownloadTask AssetDownloadTask, resolvedMediaSelection MediaSelection) {
	objc.Call[objc.Void](a_, objc.Sel("URLSession:assetDownloadTask:didResolveMediaSelection:"), session, assetDownloadTask, resolvedMediaSelection)
}

func (a_ AssetDownloadDelegateObject) HasURLSessionAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoad() bool {
	return a_.RespondsToSelector(objc.Sel("URLSession:assetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:"))
}

// Tells the delegate that a download task loaded a new time range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/1621019-urlsession?language=objc
func (a_ AssetDownloadDelegateObject) URLSessionAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoad(session foundation.URLSession, assetDownloadTask AssetDownloadTask, timeRange coremedia.TimeRange, loadedTimeRanges []foundation.Value, timeRangeExpectedToLoad coremedia.TimeRange) {
	objc.Call[objc.Void](a_, objc.Sel("URLSession:assetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:"), session, assetDownloadTask, timeRange, loadedTimeRanges, timeRangeExpectedToLoad)
}

func (a_ AssetDownloadDelegateObject) HasURLSessionAggregateAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoadForMediaSelection() bool {
	return a_.RespondsToSelector(objc.Sel("URLSession:aggregateAssetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:forMediaSelection:"))
}

// Tells the delegate that the aggregate download task loaded a new time range. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/2919988-urlsession?language=objc
func (a_ AssetDownloadDelegateObject) URLSessionAggregateAssetDownloadTaskDidLoadTimeRangeTotalTimeRangesLoadedTimeRangeExpectedToLoadForMediaSelection(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, timeRange coremedia.TimeRange, loadedTimeRanges []foundation.Value, timeRangeExpectedToLoad coremedia.TimeRange, mediaSelection MediaSelection) {
	objc.Call[objc.Void](a_, objc.Sel("URLSession:aggregateAssetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:forMediaSelection:"), session, aggregateAssetDownloadTask, timeRange, loadedTimeRanges, timeRangeExpectedToLoad, mediaSelection)
}

func (a_ AssetDownloadDelegateObject) HasURLSessionAggregateAssetDownloadTaskWillDownloadToURL() bool {
	return a_.RespondsToSelector(objc.Sel("URLSession:aggregateAssetDownloadTask:willDownloadToURL:"))
}

// Tells the delegate the final location of the asset when the download completes. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/2897241-urlsession?language=objc
func (a_ AssetDownloadDelegateObject) URLSessionAggregateAssetDownloadTaskWillDownloadToURL(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, location foundation.URL) {
	objc.Call[objc.Void](a_, objc.Sel("URLSession:aggregateAssetDownloadTask:willDownloadToURL:"), session, aggregateAssetDownloadTask, location)
}

func (a_ AssetDownloadDelegateObject) HasURLSessionAssetDownloadTaskWillDownloadVariants() bool {
	return a_.RespondsToSelector(objc.Sel("URLSession:assetDownloadTask:willDownloadVariants:"))
}

// Tells the delegate that a download task completed variant selection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/3751760-urlsession?language=objc
func (a_ AssetDownloadDelegateObject) URLSessionAssetDownloadTaskWillDownloadVariants(session foundation.URLSession, assetDownloadTask AssetDownloadTask, variants []AssetVariant) {
	objc.Call[objc.Void](a_, objc.Sel("URLSession:assetDownloadTask:willDownloadVariants:"), session, assetDownloadTask, variants)
}

func (a_ AssetDownloadDelegateObject) HasURLSessionAggregateAssetDownloadTaskDidCompleteForMediaSelection() bool {
	return a_.RespondsToSelector(objc.Sel("URLSession:aggregateAssetDownloadTask:didCompleteForMediaSelection:"))
}

// Tells the delegate that a child task finished downloading a media selection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/2897211-urlsession?language=objc
func (a_ AssetDownloadDelegateObject) URLSessionAggregateAssetDownloadTaskDidCompleteForMediaSelection(session foundation.URLSession, aggregateAssetDownloadTask AggregateAssetDownloadTask, mediaSelection MediaSelection) {
	objc.Call[objc.Void](a_, objc.Sel("URLSession:aggregateAssetDownloadTask:didCompleteForMediaSelection:"), session, aggregateAssetDownloadTask, mediaSelection)
}

func (a_ AssetDownloadDelegateObject) HasURLSessionAssetDownloadTaskDidFinishDownloadingToURL() bool {
	return a_.RespondsToSelector(objc.Sel("URLSession:assetDownloadTask:didFinishDownloadingToURL:"))
}

// Tells the delegate that a download task finished downloading the requested asset. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avassetdownloaddelegate/1845200-urlsession?language=objc
func (a_ AssetDownloadDelegateObject) URLSessionAssetDownloadTaskDidFinishDownloadingToURL(session foundation.URLSession, assetDownloadTask AssetDownloadTask, location foundation.URL) {
	objc.Call[objc.Void](a_, objc.Sel("URLSession:assetDownloadTask:didFinishDownloadingToURL:"), session, assetDownloadTask, location)
}
