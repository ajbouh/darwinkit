// Code generated by DarwinKit. DO NOT EDIT.

package avfoundation

import (
	"github.com/progrium/darwinkit/macos/coregraphics"
	"github.com/progrium/darwinkit/macos/coremedia"
	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// A protocol that defines the interface for a video composition instruction. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/1386654-avvideocompositioninstruction?language=objc
type PVideoCompositionInstruction interface {
	// optional
	EnablePostProcessing() bool
	HasEnablePostProcessing() bool

	// optional
	TimeRange() coremedia.TimeRange
	HasTimeRange() bool

	// optional
	ContainsTweening() bool
	HasContainsTweening() bool

	// optional
	PassthroughTrackID() objc.Object
	HasPassthroughTrackID() bool

	// optional
	RequiredSourceTrackIDs() []foundation.Value
	HasRequiredSourceTrackIDs() bool

	// optional
	RequiredSourceSampleDataTrackIDs() []foundation.Number
	HasRequiredSourceSampleDataTrackIDs() bool

	// optional
	LayerInstructions() []VideoCompositionLayerInstruction
	HasLayerInstructions() bool

	// optional
	BackgroundColor() coregraphics.ColorRef
	HasBackgroundColor() bool
}

// ensure impl type implements protocol interface
var _ PVideoCompositionInstruction = (*VideoCompositionInstructionObject)(nil)

// A concrete type for the [PVideoCompositionInstruction] protocol.
type VideoCompositionInstructionObject struct {
	objc.Object
}

func (v_ VideoCompositionInstructionObject) HasEnablePostProcessing() bool {
	return v_.RespondsToSelector(objc.Sel("enablePostProcessing"))
}

// A Boolean value that indicates whether the composition enables post-processing. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/1386654-avvideocompositioninstruction/1386216-enablepostprocessing?language=objc
func (v_ VideoCompositionInstructionObject) EnablePostProcessing() bool {
	rv := objc.Call[bool](v_, objc.Sel("enablePostProcessing"))
	return rv
}

func (v_ VideoCompositionInstructionObject) HasTimeRange() bool {
	return v_.RespondsToSelector(objc.Sel("timeRange"))
}

// The time range during which the instruction is effective. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/1386654-avvideocompositioninstruction/1389873-timerange?language=objc
func (v_ VideoCompositionInstructionObject) TimeRange() coremedia.TimeRange {
	rv := objc.Call[coremedia.TimeRange](v_, objc.Sel("timeRange"))
	return rv
}

func (v_ VideoCompositionInstructionObject) HasContainsTweening() bool {
	return v_.RespondsToSelector(objc.Sel("containsTweening"))
}

// A Boolean value that indicates whether the composition contains tweening. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/1386654-avvideocompositioninstruction/1389376-containstweening?language=objc
func (v_ VideoCompositionInstructionObject) ContainsTweening() bool {
	rv := objc.Call[bool](v_, objc.Sel("containsTweening"))
	return rv
}

func (v_ VideoCompositionInstructionObject) HasPassthroughTrackID() bool {
	return v_.RespondsToSelector(objc.Sel("passthroughTrackID"))
}

// An identifier of a source track to pass through without compositing. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/1386654-avvideocompositioninstruction/1389919-passthroughtrackid?language=objc
func (v_ VideoCompositionInstructionObject) PassthroughTrackID() objc.Object {
	rv := objc.Call[objc.Object](v_, objc.Sel("passthroughTrackID"))
	return rv
}

func (v_ VideoCompositionInstructionObject) HasRequiredSourceTrackIDs() bool {
	return v_.RespondsToSelector(objc.Sel("requiredSourceTrackIDs"))
}

// The identifiers of the video tracks the instruction requires to compose frames. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/1386654-avvideocompositioninstruction/1388661-requiredsourcetrackids?language=objc
func (v_ VideoCompositionInstructionObject) RequiredSourceTrackIDs() []foundation.Value {
	rv := objc.Call[[]foundation.Value](v_, objc.Sel("requiredSourceTrackIDs"))
	return rv
}

func (v_ VideoCompositionInstructionObject) HasRequiredSourceSampleDataTrackIDs() bool {
	return v_.RespondsToSelector(objc.Sel("requiredSourceSampleDataTrackIDs"))
}

// The identifiers of the sample data tracks the instruction requires to compose frames. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/1386654-avvideocompositioninstruction/3750315-requiredsourcesampledatatrackids?language=objc
func (v_ VideoCompositionInstructionObject) RequiredSourceSampleDataTrackIDs() []foundation.Number {
	rv := objc.Call[[]foundation.Number](v_, objc.Sel("requiredSourceSampleDataTrackIDs"))
	return rv
}

func (v_ VideoCompositionInstructionObject) HasLayerInstructions() bool {
	return v_.RespondsToSelector(objc.Sel("layerInstructions"))
}

// Instructions that specify how to layer and compose video frames from source tracks. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avvideocompositioninstruction/1389689-layerinstructions?language=objc
func (v_ VideoCompositionInstructionObject) LayerInstructions() []VideoCompositionLayerInstruction {
	rv := objc.Call[[]VideoCompositionLayerInstruction](v_, objc.Sel("layerInstructions"))
	return rv
}

func (v_ VideoCompositionInstructionObject) HasBackgroundColor() bool {
	return v_.RespondsToSelector(objc.Sel("backgroundColor"))
}

// The background color of the composition. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avvideocompositioninstruction/1389384-backgroundcolor?language=objc
func (v_ VideoCompositionInstructionObject) BackgroundColor() coregraphics.ColorRef {
	rv := objc.Call[coregraphics.ColorRef](v_, objc.Sel("backgroundColor"))
	return rv
}
