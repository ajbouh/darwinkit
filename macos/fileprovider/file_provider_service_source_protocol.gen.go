// Code generated by DarwinKit. DO NOT EDIT.

package fileprovider

import (
	"unsafe"

	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// A service that provides a custom communication channel between the host app and the File Provider extension. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileproviderservicesource?language=objc
type PFileProviderServiceSource interface {
	// optional
	MakeListenerEndpointAndReturnError(error unsafe.Pointer) foundation.XPCListenerEndpoint
	HasMakeListenerEndpointAndReturnError() bool

	// optional
	ServiceName() foundation.FileProviderServiceName
	HasServiceName() bool
}

// ensure impl type implements protocol interface
var _ PFileProviderServiceSource = (*FileProviderServiceSourceObject)(nil)

// A concrete type for the [PFileProviderServiceSource] protocol.
type FileProviderServiceSourceObject struct {
	objc.Object
}

func (f_ FileProviderServiceSourceObject) HasMakeListenerEndpointAndReturnError() bool {
	return f_.RespondsToSelector(objc.Sel("makeListenerEndpointAndReturnError:"))
}

// Returns an endpoint object that lets the host app communicate with the File Provider extension. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileproviderservicesource/2915876-makelistenerendpointandreturnerr?language=objc
func (f_ FileProviderServiceSourceObject) MakeListenerEndpointAndReturnError(error unsafe.Pointer) foundation.XPCListenerEndpoint {
	rv := objc.Call[foundation.XPCListenerEndpoint](f_, objc.Sel("makeListenerEndpointAndReturnError:"), error)
	return rv
}

func (f_ FileProviderServiceSourceObject) HasServiceName() bool {
	return f_.RespondsToSelector(objc.Sel("serviceName"))
}

// A name that uniquely identifies the service (reverse domain name notation is recommended). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileproviderservicesource/2915879-servicename?language=objc
func (f_ FileProviderServiceSourceObject) ServiceName() foundation.FileProviderServiceName {
	rv := objc.Call[foundation.FileProviderServiceName](f_, objc.Sel("serviceName"))
	return rv
}
